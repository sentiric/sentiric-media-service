### docker-compose.service.yml (GÜNCELLENMİŞ)

networks:
  sentiric-net: { name: "${NETWORK_NAME:-sentiric-net}", driver: bridge }

volumes:
  rabbitmq_data:
  minio_data:

services:

  rabbitmq:
    build: { context: ../sentiric-rabbitmq }
    env_file: ["${ENV_FILE_PATH}"]
    ports: ["15672:15672", "5672:5672"]
    volumes: [rabbitmq_data:/var/lib/rabbitmq/]
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  minio:
    image: quay.io/minio/minio
    env_file: ["${ENV_FILE_PATH}"]
    command: server /data --console-address ":9001"
    ports:
      - "${MINIO_API_PORT}:9000" # S3 API portu
      - "${MINIO_CONSOLE_PORT}:9001" # Web arayüzü portu
    volumes:
      - minio_data:/data
    networks:
      - sentiric-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    
  media-service:
    # DEĞİŞİKLİK: build context'i standart hale getirildi. 
    # Bu komut artık sentiric-media-service dizini içinden çalıştırılmalıdır.
    build: { context: . } 
    env_file: ["${ENV_FILE_PATH}"]
    volumes:
      - "../sentiric-media-record:${MEDIA_SERVICE_RECORD_BASE_PATH}:rw"
      - "../sentiric-assets:/app/assets:ro"       
      - "${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"
    ports: 
      - "${MEDIA_SERVICE_PORT}:${MEDIA_SERVICE_PORT}"
      - "${MEDIA_SERVICE_METRICS_PORT}:${MEDIA_SERVICE_METRICS_PORT}"      
      - "${MEDIA_SERVICE_GRPC_PORT}:${MEDIA_SERVICE_GRPC_PORT}"
      - "${RTP_SERVICE_PORT_MIN}-${RTP_SERVICE_PORT_MAX}:${RTP_SERVICE_PORT_MIN}-${RTP_SERVICE_PORT_MAX}/udp"
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "50052"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on: {
      minio: { condition: service_healthy },
      rabbitmq: { condition: service_healthy },
    }         